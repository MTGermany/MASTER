

#########################################################################
#########################################################################
# maple script to produce Color 3D plots from data files
# in a format that gnuplot understands.
# call the demo script with "maple dataTo3d.maple",
# or paste the lines in the input window of
# an interactive session "xmaple"
#
# The z data are taken from column col_z, and the corresponding
# x and y data from the columns col_x and col_y
# define the grid. 
# An empty line should lie between consecutive sweeps in
# x or y direction, cf. the demo file.
#########################################################################
#########################################################################


#########################################################################
# User interface: select names, ranges, columns to be plotted...
#########################################################################

pathdata    := `./`;
name_of_proj := `LWR_jamIC`;


name_of_set := cat(name_of_proj,`.dat`);
name_of_ps  := cat(name_of_proj,`.rho_maple.eps`);
name_of_jpg:= cat(name_of_proj,`.rho_maple.jpg`);
name_of_gif:= cat(name_of_proj,`.rho_maple.gif`);

# columns to be plotted

col_x       := 2;
col_y       := 1;
col_z       := 3; 


# inner: what changes from line to line; outer: what changes blockwise
# experimental 3D: col_inner=t=y; theo: col_inner=x

col_inner   := col_y; 
col_outer   := col_x; 


# Functions of the columns to be plotted

Fx  := x -> x:  # spatial coordinate in direction of traffic flow
Fy  := y -> y:  # time in hours
Fz  := z->min(z, 80);


# initial plot limits of the plot functions

Fymin        := 3;       # e.g., x in km
Fymax        := 10.5;
Fxmin        := 0.;      # e.g., time in min
Fxmax        := 20;
Fzmin        := 22;      # e.g. density in veh/h
Fzmax        := 41;


# initial plot arguments (can be changed also
# in an interactive maple session)

plotargs := axes=frame,             # normal,frame,boxed,none
    tickmarks = [5,5,0],            # minimal number of tickmarks
    labelfont = [TIMES,ROMAN,16],   # font family: TIMES, SYMBOL,..
    axesfont  = [TIMES,ROMAN,12],   # style = ROMAN,BOLD,ITALIC for TIMES
    font      = [TIMES,ROMAN,12],   #         none for SYMBOL
    labels    = [`t`,`x`,``],        # string enclosed with `..`
    thickness = 2,                  # 0 (thin) ... 3(thick)
    linestyle = 1,                  # 0,1: solid, >=2: dashed etc
    orientation = [269.99,0.1],         # view from phi,theta
    projection = 1,                 # fisheye=0...parallel=1
    shading   = zhue,               # z,zgreyscale,zhue,none,.. 
                                    # (define either color or shading!)
    style     = patchcontour,        # patch, patchnogrid,(patch)contour,hidden
    #style     = patchnogrid,        # patch, patchnogrid,(patch)contour,hidden
    contours  = [27.1,28,29,30,31,32,33,34,35,36,37,38,39],
    view      = [Fxmin..Fxmax, Fymin..Fymax, Fzmin..Fzmax];


#########################################################################
# End user interface
#########################################################################



#########################################################################
# import packages
#########################################################################


with(plots):
with(stats):
with(linalg):  # to define vectdim=number of lines, coldim=number of cols
readlib(unassign);




#########################################################################
# read data: format of data3D is: 
# x=const for lines 0*nx+1..0*nx+nx; 1*nx+1..1*nx+nx; 2*nx+1..2*nx + nx,...
# y=const for lines 1, nx+1, (ny-1)*nx+1; 2,nx+2,..(ny-1)*nx+2; ...
# ->
# x=const for lines (iy-1)*nx+ix; iy=1..ny, ix fest
# y=const for lines (iy-1)*nx+ix; iy=1..ny, ix fest
#########################################################################

dataname := cat(pathdata,`/`,name_of_set);
col_max := max(col_x,col_y,col_z);

data3D   :=readdata(dataname, float, col_max):


#########################################################################
#### determine length and grid sizes of 3D data in x and  y direction
#### dy==dt=col_y changes in each line; 
#### dx changes only after one dy loop (dt loop) completed 
#########################################################################

# distinguish between xmin (original data), xminaft(after shift of zero
# axes, but complete field), Fxmin(DISPLAYED  minimal value of shifted field)

xmin        := data3D[1,col_x];       # minimum values of original data
ymin        := data3D[1,col_y];       # (assumed in incresing order)

j  :=1;


if(col_inner=col_y) 
then
  while( (data3D[j+1,col_x]-xmin)<10**(-6)) 
    do j:=j+1: od:
  ny := j;
  nx := vectdim(data3D)/ny;
  dxout := data3D[ny+1,col_x] - data3D[1,col_x];
  dyout := data3D[2,col_y] - data3D[1,col_y];
fi;

if( col_inner=col_x)
then
  while( (data3D[j+1,col_y]-ymin)<10**(-6)) 
    do j:=j+1: od:
  nx := j;
  ny := vectdim(data3D)/nx;
  dyout := data3D[nx+1,col_y] - data3D[1,col_y];
  dxout := data3D[2,col_x] - data3D[1,col_x];
fi;




unassign('j');


#########################################################################
# assign data3D to a three-level nested list object rho3D
##### Generate plottable list object (arrays not plottable)
#########################################################################

unassign('z3Darr');
z3Darr := array(1..nx,1..ny);

if( col_inner=col_y)
then
for ix from 1 to nx do
  for iy from 1 to ny do
      linenumber := (ix-1)*ny + iy;
      z3Darr[ix,iy]:= data3D[linenumber,col_z];
  od;
od;
fi;

if( col_inner=col_x)
then
for ix from 1 to nx do
  for iy from 1 to ny do
      linenumber := (iy-1)*nx + ix;
      z3Darr[ix,iy]:= data3D[linenumber,col_z];
  od;
od;
fi;


z2D := convert(z3Darr,listlist):
z3D := [seq([seq( 
           [Fx(xmin+(i-1)*dxout), Fy(ymin+(j-1)*dyout), Fz(z2D[i,j]) ], 
           j=1..ny) ], i=1..nx)]:


#########################################################################
# Actual plotting and export as ps files
#########################################################################

# distinguish between xmin (original data), xminaft(after shift of zero
# axes, but complete field z3D), Fxmin(DISPLAYED  minimal value of shifted field)

xminaft := z3D[1,1,1];
yminaft := z3D[1,1,2];
Fzcolor  := (x,y) ->  z3D[round(x/dxout)+xminaft+1, 
                              round(y/dyout)+yminaft+1,3]:





# output in ps file; skip if this file is read interactively
# and you want display of graphics on screen (default)
# (no png, eps, but ps effectively=eps)
plotsetup(ps,plotoutput = name_of_ps,
    plotoptions=`color,height=300, width=450, portrait,noborder`);
#plotsetup(jpeg,plotoutput = name_of_jpg,
#    plotoptions=`color,height=900, width=1200, portrait,noborder`);
#plotsetup(gif,plotoutput = `name_of_gif`,
#    plotoptions=`color,height=900, width=1200, portrait,noborder`);


surfdata(z3D,plotargs);

quit

